1.动态SQL
  元素	作用	备注
  if	判断语句	单条件分支判断
  choose、when、otherwise	相当于Java中的 case when语句	多条件分支判断
  trim、where、set	辅助元素	用于处理一些SQL拼装问题
  foreach	循环语句	在in语句等列举条件常用

  a.if标签，搭配test属性， 通常在where子句使用，判断参数值决定是否使用某个条件。
    <if test="name != null and name != ''">
        and NAME = #{name}
    </if>

  b.foreach标签，循环语句，用于IN条件，在sql中对集合迭代遍历，或者批量删除、添加等。
    <!-- in查询所有，不分页 -->
    <select id="selectIn" resultMap="BaseResultMap">
        select name,hobby from student where id in
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>
    collection：collection 属性的值有三个分别是 list、array、map 三种，分别对应的参数类型为：List、数组、map 集合。
    item ：表示在迭代过程中每一个元素的别名
    index ：表示在迭代过程中每次迭代到的位置（下标）
    open ：前缀
    close ：后缀
    separator ：分隔符，表示迭代时每个元素之间以什么分隔

  c.choose、when、otherwise标签，选择功能
    <!-- 有name的时候使用name搜索，没有的时候使用id搜索 -->
        <select id="select" resultType="com.example.StudentDomain">
            SELECT * FROM student
            WHERE 1=1
            <choose>
                <when test="name != null and name != ''">
                    AND name LIKE concat('%', #{name}, '%')
                </when>
                <when test="id != null">
                    AND id = #{id}
                </when>
            </choose>
        </select>

  d.where标签
    当 if 标签较多时，这样的组合可能会导致错误。 如下：
    <select id="getStudentListWhere" parameterType="Object" resultMap="BaseResultMap">
        SELECT * from STUDENT WHERE
        <if test="name!=null and name!='' ">
            NAME LIKE CONCAT(CONCAT('%', #{name}),'%')
        </if>
        <if test="hobby!= null and hobby!= '' ">
            AND hobby = #{hobby}
        </if>
    </select>
    当 name 值为 null 时，查询语句会出现 “WHERE AND” 的情况，解决该情况除了将"WHERE"改为“WHERE 1=1”之外，还可以利用 where
    标签。这个“where”标签会知道如果它包含的标签中有返回值的话，它就插入一个‘where’。此外，如果标签返回的内容是以 AND 或 OR 开头的，则它会剔除掉。
    <select id="getStudentListWhere" parameterType="Object" resultMap="BaseResultMap">
        SELECT * from STUDENT
        <where>
            <if test="name!=null and name!='' ">
                NAME LIKE CONCAT(CONCAT('%', #{name}),'%')
            </if>
            <if test="hobby!= null and hobby!= '' ">
                AND hobby = #{hobby}
            </if>
        </where>
    </select>

  e.set标签
    没有使用 if 标签时，如果有一个参数为 null，都会导致错误。当在 update 语句中使用 if 标签时，如果最后的 if 没有执行，则或导致逗号多余错误。使用 set 标签可以将动态的配置 set
    关键字，和剔除追加到条件末尾的任何不相关的逗号。
    <update id="updateStudent" parameterType="Object">
        UPDATE STUDENT
        SET NAME = #{name},
        MAJOR = #{major},
        HOBBY = #{hobby}
        WHERE ID = #{id};
    </update>

    <update id="updateStudent" parameterType="Object">
        UPDATE STUDENT SET
        <if test="name!=null and name!='' ">
            NAME = #{name},
        </if>
        <if test="hobby!=null and hobby!='' ">
            MAJOR = #{major},
        </if>
        <if test="hobby!=null and hobby!='' ">
            HOBBY = #{hobby}
        </if>
        WHERE ID = #{id};
    </update>

    使用 set+if 标签修改后，如果某项为 null 则不进行更新，而是保持数据库原值。
    <update id="updateStudent" parameterType="Object">
        UPDATE STUDENT
        <set>
            <if test="name!=null and name!='' ">
                NAME = #{name},
            </if>
            <if test="hobby!=null and hobby!='' ">
                MAJOR = #{major},
            </if>
            <if test="hobby!=null and hobby!='' ">
                HOBBY = #{hobby}
            </if>
        </set>
        WHERE ID = #{id};
    </update>

  f.trim标签
  有时候我们要去掉一些特殊的SQL语法，比如常见的and、or，此时可以使用trim元素。trim元素意味着我们需要去掉一些特殊的字符串，
  prefix代表的是语句的前缀，而prefixOverrides代表的是你需要去掉的那种字符串，suffix表示语句的后缀，suffixOverrides代表去掉的后缀字符串。
        <select id="select" resultType="com.ankeetc.spring.domain.StudentDomain">
            SELECT * FROM student
            <trim prefix="WHERE" prefixOverrides="AND">
                <if test="name != null and name != ''">
                    AND name LIKE concat('%', #{name}, '%')
                </if>
                <if test="id != null">
                    AND id = #{id}
                </if>
            </trim>
        </select>

2.在IDE控制台打印SQL执行语句
添加配置信息：
mybatis.configuration.log-impl: org.apache.ibatis.logging.stdout.StdOutImpl


































