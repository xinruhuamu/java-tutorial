设计模式分为三大类别和六大原则
一、三大类别
    1.创建型模式，5种，用于创建对象
    工厂方法模式、抽象方法模式、单例模式、建造者模式、原型模式
    2.结构型模式，7种，用于处理类或者对象的组合
    适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式
    3.行为型模式，11种，用于描述类或者对象怎样交互和分配职责
    策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式

二、六大原则
    1.开闭原则（总纲）
    类、模块和方法对扩展开放、对修改关闭

    2.单一职责原则
    应该有且仅有一个原因引起类的变更（There should never be more than one reason for a class to change）。
    每个类实现单一的职责，否则进行拆分。

    3.里氏替换原则
    所有引用基类的地方必须能透明地使用其子类的对象（Functions that use pointers or references to base classes must be able to
    use objects of derived classes without knowing it）。子类必须完全实现父类的功能（注意：如果子类不能完整的实现父类的方法，
    或者父类的某些方法在子类中已经发生畸变，则建议断开父子继承关系，采用依赖、聚合、组合等关系代替继承），凡是父类出现的地方，都可以使用子类替换。

    4.依赖倒置原则
    高层的模块不应该依赖于低层的模块，这两者都应该依赖于其抽象，抽象不应该依赖细节，细节应该依赖抽象（High level modules should not
    depend upon low level modules.Both should depend upon abstractions.Abstractions should not depend upon details.Details should depend upon abstractions）.
    高层次的类不应该依赖于，或耦合于低层次的类，相反，这两者都应该通过相关的接口去实现。要面向接口编程，而不是面向实现编程，所以编程的
    时候并不是按照符合我们逻辑思考的“依赖关系”去编程掉的，这种不符，就是依赖倒置。

    5.接口隔离原则
    Clients should not be forced to depend upon interfaces that they don't use.The dependency of one class to another one should depend on the smallest possible interface.
    类间的依赖关系应该建立在最小的接口上。

    6.迪米特原则
    Law of Demeter，LoD，即 Least Knowledge Principle。一个对象应该对其他对象有最少的了解。

三、类之间的五种关系
    1.关联关系,   ——————>
    4.依赖关系,   ------>

    2.聚合关系, ◇——————>
    3.组合关系, ◆——————>
----------------------------------------------
    5.泛化关系,即继承 ——————▷
    还有一种实现关系,即接口实现-------▷









































