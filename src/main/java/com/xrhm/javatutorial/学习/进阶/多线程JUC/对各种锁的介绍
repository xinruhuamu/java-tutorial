注：一个锁可以同时属于多个锁的分类。
https://zhuanlan.zhihu.com/p/71156910

0. synchronized与Lock
Java中两种加锁方式：synchronized关键字（基于jvm），另一种是用Lock接口的实现类（基于api）。

synchronized为Java内置关键字基于jvm实现，底层为监视器monitor；
Lock接口最重要的三个实现类：ReentrantLock可重入锁、ReadLock读锁、WriteLock写锁。

1.锁的分类
    a.悲观锁和乐观锁
    悲观锁（Pessimistic Lock），指默认数据会被修改，所以线程每次获取数据都会上锁，别的线程想获取数据会被拒绝，直到悲观锁释放。
    乐观锁（Optimistic Lock），默认数据不会被修改，所以线程获取数据不会加锁，但是如果想更新数据，则会在更新前检查读取到更新这段时间内，
    数据有没有被修改。如果修改过，则重新读取，再次尝试更新，直到更新成功。

    悲观锁阻塞事务，乐观锁回滚。
    悲观锁适用写操作较多的场景，乐观锁适用于写操作较少、读操作较多的场景。

    CAS-乐观锁的基础
    CAS：Compare-and-Swap，比较并替换。
    乐观锁在 Java 中的使用，是无锁编程，常常采用的是 CAS 算法，典型的例子就是原子类，通过 CAS 自旋实现原子操作的更新。

    b.自旋锁
    while(true)无限循环。
    尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU。

    c.偏向锁/轻量级锁/重量级锁
    锁的状态共四种，按照从轻到重分为：无锁、偏向锁、轻量级锁、重量级锁。
    这三种锁的状态针对synchronized关键字。

    偏向锁：初次执行synchronized代码块的时候，锁对象变为偏向锁（通过CAS修改对象头的锁标志位），即偏向与第一个获取它的线程的锁。
    执行完代码块后，不会立刻释放偏向锁；当第二次执行代码块时，判断此时持有锁的线程是否是自己（通过线程ID判断，持有锁的线程ID也在对象头里），
    如果是则正常执行不释放锁。由于之前没有释放锁，就不需要重新加锁，没有额外开销，性能很高。

    轻量级锁：一旦有第二个线程加入锁竞争，偏向锁会升级成轻量级锁（自旋锁），没有抢到锁的线程会自旋，即不停判断锁是否被成功获取。获取锁的操作
    就是通过CAS修改对象头里的锁标志位；先比较当前锁标志位是否位“释放”，如果是则设置位“锁定”，CAS是原子性发生的，这就是抢到了锁，然后线程将
    所得持有者信息修改为自己。
    线程的自旋等待锁现象称为忙等（busy-waiting），短时间的忙等，换取线程在用户态和内核态之间切换的开销。

    重量级锁：如果锁竞争严重，线程达到最大自旋次数，会将轻量级锁升级为重量级锁（CAS操作修改锁标志位，但不修改持有锁的线程ID），当后续线程尝试获取锁时，
    发现被占用的锁为重量级锁，则直接挂起（而不是忙等），等待将来被唤醒。
    在JDK1.6之前，synchronized直接加重量级锁，性能不佳，现在明显优化了。

    synchronized锁的这种升级，称为锁膨胀。

    d.可重入锁（递归锁）
    允许同一线程再次获取同一把锁。synchronized和Reentrant开头的类均为可重入锁。

    e.公平锁和非公平锁
    公平锁:当锁释放的时候，先申请的线程先获取锁（等待时间最长的获取锁）。
    非公平锁：当锁释放时，线程随机获取锁。

    ReentrantLock重写锁获取方式和锁释放方式实现了公平锁FairSync和非公平锁UnFairSync，默认非公平锁。
    synchronized也是一种非公平锁，且没有办法变成公平锁。

    f.可中断锁
    可以响应中断的锁。
    如果线程等待时间过长，不想继续等待可以让自己或者在别的线程中断它，叫做可中断锁。
    synchronized是不可中断锁，Lock的实现类是可中断锁。
    Lock接口中
    void lockInterruptibly() throws InterruptedException //就是接收到中断请求可中断等待。

    g.读写锁，共享锁、互斥锁
    读写锁是一对锁，读锁（共享锁），写锁（互斥锁，排它锁）。

    读写锁是悲观锁。

    注：个人理解，Java中大多数是悲观锁，包括synchronized和Lock类；JUC中的原子类是利用乐观锁实现的。

























