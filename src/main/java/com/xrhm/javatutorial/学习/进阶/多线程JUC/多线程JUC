Java多线程
目的：多线程是为了更好利用CPU资源，提高生产率。
关键词：原子性、可见性、有序性。
线程安全：要么只读、要么加锁。

1.重要概念
    a.同步和异步
    同步：同步方法调用开始后，调用者必须等待方法返回后才能继续后续行动。
    异步：方法调用开始后，调用者不用等待方法返回就可以继续后续行动。
    b.并发Concurrency和并行
    并发：指多个任务在同一时间间隔发生（交替执行）
    并行：指多个任务在同一时刻一同发生（同时执行）
    c.临界区
    表示一种公共资源或者共享数据；可以被多个线程使用，但是每一次只允许一个线程使用，一旦临界区被占用，其它线程要想使用必须等待上一个线程使用结束。
    d.阻塞和非阻塞

2.创建线程的常用方法
    a.继承Thread类（本质实现Runnable接口），没有返回值
        start()方法启用新线程，使其可用；然后再运行run()方法，执行线程内任务。
    b.实现Runnable接口，没有返回值

    c.使用线程池(spring)
      pool:
        queue-capacity: 10 //缓冲队列容量，等待执行的最大线程数
        max-size: 20 //最大线程数，即线程池中最大线程数
        core-size: 5 //核心线程数，即可用、可执行任务线程数
        keep-alive: 60s //线程空闲后最大存活时间
      thread-name-prefix: async-service- //线程名称前缀

x.

TimeUnit.MILLISECONDS.sleep(3000);//线程休眠时间，同Thread.sleep()

3.多线程关键字，为了解决并发编程中的原子性、可见性、有序性，提供关键词包括synchronized、volatile、final、concurren包等。
    a.Synchronized 解决多个线程之间访问资源的同步性，保证被修饰的方法或者代码块在任意时刻只能有一个线程访问，有其他线程访问则阻塞。
        性质：保证原子性和可见性、有序性。
        作用：1.确保线程互斥访问同步代码 2.保证共享变量修改及时可见 3.有效解决重排序问题
        方法: 1.修饰普通方法 锁是当前实例对象
              2.修饰静态方法 锁是当前类的class对象
              3.修饰代码块 锁是括号里面的对象 synchronized(this){...};

    b.volatile 解决变量在多个线程之间的可见性，不会发生阻塞。
        性质：保证可见性和有序性，不能保证原子性。
        作用: 1.解决变量在多个线程之间的可见性 2.防止指令重排序。
        方法：修饰变量

4.synchronized和ReentrantLock的区别
Java中两种加锁方式：synchronized关键字（基于jvm），另一种是用Lock接口的实现类（基于api）。
    a.synchronized和ReentrantLock均为可重入锁，
    b.synchronized依赖jvm实现；ReentrantLock依赖API，需要lock()和unlock()方法配合try/finally实现。
    c.synchronized为非公平锁，ReentrantLock默认非公平锁，但是可以重新锁的获取和释放方式变为公平锁。
    d.ReentrantLock比synchronized多一些功能
    三点：等待可中断（synchronized不可中断）、可实现公平锁、可实现选择性通知。

    ReenTrantLock提供了一种能够中断等待锁的线程的机制，通过lock.lockInterruptibly()来实现这个机制。也
    就是说正在等待的线程可以选择放弃等待，改为处理其他事情。
    ReenTrantLock可以指定是公平锁还是非公平锁。而synchronized只能是非公平锁。所谓的公平锁就是先等
    待的线程先获得锁。 ReenTrantLock默认情况是非公平的，可以通过 ReenTrantLock类的
    ReentrantLock(boolean fair) 构造方法来制定是否是公平的。
    synchronized关键字与wait()和notify/notifyAll()方法相结合可以实现等待/通知机制，ReentrantLock类当然也
    可以实现，但是需要借助于Condition接口与newCondition() 方法。Condition是JDK1.5之后才有的，它具有很
    好的灵活性，比如可以实现多路通知功能也就是在一个Lock对象中可以创建多个Condition实例（即对象监视
    器），线程对象可以注册在指定的Condition中，从而可以有选择性的进行线程通知，在调度线程上更加灵
    活。 在使用notify/notifyAll()方法进行通知时，被通知的线程是由 JVM 选择的，用ReentrantLock类结合
    Condition实例可以实现“选择性通知” ，这个功能非常重要，而且是Condition接口默认提供的。而
    synchronized关键字就相当于整个Lock对象中只有一个Condition实例，所有的线程都注册在它一个身上。如果
    执行notifyAll()方法的话就会通知所有处于等待状态的线程这样会造成很大的效率问题，而Condition实例的
    signalAll()方法 只会唤醒注册在该Condition实例中的所有等待线程。

5.原子类Atomic
具有原子/原子操作特征的类，提供简单高效、线程安全的方式更新变量的值。

6.关于ThreadLocal
JDK提供，字面意思：线程本地变量，保证变量只能当前线程访问，而不被其他线程访问。
源码分析：
    a.set()
        public void set(T value) {
            Thread t = Thread.currentThread();//依托于当前线程的ThreadLocalMap结构，保证其他线程无法访问
            ThreadLocalMap map = getMap(t);//每个线程都有一个ThreadLocalMap数据结构，和ThreadLocal实例对象建立联系
            if (map != null)
                map.set(this, value);
            else
                createMap(t, value);
        }
    ThreadLocalMap为ThreadLocal的内部类，其中的set(ThreadLocal<?> key, Object value)，在ThreadLoalMap中，也是初始化一个大小16的Entry数组，
    Entry对象用来保存每一个key-value键值对，只不过这里的key永远都是ThreadLocal对象，是不是很神奇，通过ThreadLocal对象的set方法，结果把Thread
    -Local对象自己当做key，放进了ThreadLoalMap中；
    ThreadLocal的存储本质为ThreadLocalMap<ThreadLocal,Object>形式，详细结构看本文件夹下的图片。



