OOP 面向对象三大特性:封装、继承、多态、（抽象）
1.封装
只暴露对象的公开属性和方法，无法看到内部实现过程；对象功能内聚，模块之间的耦合降低，更有维护性。
设计模式七大原则之一的迪米特原则，是对封装的具体要求。
a.内部类


2.继承 Is-a
复用对象。
里氏替换原则。
子类不继承父类的私有属性和方法，但可以通过反射获取私有。

注：一个类如果存在一个有参构造方法，则一定要添加一个无参构造方法，防止可能发生的继承错误。

a.this和super
this:代表当前对象的引用，谁调用，代表谁。
this只能在类中的非静态方法使用。

super:代表当前对象父类的引用。
super不能再static中使用。
    Ⅰ：调用成员变量
        * this.成员变量，调用本类成员变量，也可以调用父类成员变量
        * super.成员变量，调用父类成员变量
    Ⅱ：调用构造方法
        * this(...args) 调用本类的构造方法
        * super(...args) 调用父类的构造方法
    Ⅲ：调用成员方法
        * this.成员方法 调用本类的成员方法,也可以调用父类的方法
        * super.成员方法 调用父类的成员方法

子类的构造方法引用super，必须把super放在方法首行。


3.多态
根据运行时的实际对象不同，同一个方法会产生不同的运行结果，使同一个行为具有不同的表现形式。
接口引用对象就是多态的一种表现形式。

4.override 运行期
重写、覆写。多态的一种。jvm编译器无法确定最终的方法体，在运行期由jvm动态绑定，调用合适覆写方法执行。
子类实现接口，或继承父类时，保持方法签名一致，方法体不同的形式。

5.overload 编译期 静态绑定
重载。
同一个类中，方法名称相同，参数不同，方法体不同的形式。

Cat garfield = new GarfieldCat(); //只会执行父类对象能找到的方法。
（可通过a.直接创建实现类 GarfieldCat garfield = new GarfieldCat();  b.向下转型 执行子类方法,GarfieldCat newGarfield = garfield;
        c.反射 Method method =garfield.getClass().getMethod("eats", String.class); method.invoke(garfield,"意大利面")）

Animal garfield = new GarfieldCat(); //只会执行接口中的方法。同上。